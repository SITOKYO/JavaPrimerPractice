第0章　Javaを使いこなす技術者をめざそう
0.1　ようこそ、Java実践の世界へ

第Ⅰ部　さまざまな基本機能

第1章　文字列の操作
　1.1　文字列処理とは
　1.2　基本的な文字列操作
　1.3　文字列の連結
　1.4　正規表現の活用
　1.5　文字列の書式整形
　1.6　この章のまとめ
　1.7　練習問題
　1.8　練習問題の解答

第2章　日付と時間の取り扱い
　2.1　日付取り扱いの基本
　2.2　従来型APIが抱える課題
　2.3　Time API
　2.4　この章のまとめ
　2.5　練習問題
　2.6　練習問題の解答

第3章　コレクション
　3.1　コレクションとは
　3.2　ArrayListの使い方
　3.3　その他のリスト
　3.4　さまざまなコレクションクラス
　3.5　Mapの使い方
　3.6　コレクションの応用
　3.7　この章のまとめ
　3.8　練習問題
　3.9　練習問題の解答

第4章　インスタンスの基本操作
　4.1　インスタンスの5大基本操作
　4.2　インスタンスの文字列表現
　4.3　インスタンスの等価判定
　4.4　インスタンスの要約
　4.5　インスタンスの順序づけ
　4.6　インスタンスの複製
　4.7　この章のまとめ
　4.8　練習問題
　4.9　練習問題の解答

第5章　さまざまな種類のクラス
　5.1　型安全という価値
　5.2　ジェネリクス
　5.3　列挙型
　5.4　インナークラス
　5.5　この章のまとめ
　5.6　練習問題
　5.7　練習問題の解答

第6章　ラムダ式と関数オブジェクト
　6.1　関数オブジェクト
　6.2　ラムダ式
　6.3　Streamによる関数の活用
　6.4　この章のまとめ
　6.5　練習問題
　6.6　練習問題の解答

第7章　JVM制御とリフレクション
　7.1　JVMへのアクセス
　7.2　JVMの終了
　7.3　外部プログラムの実行
　7.4　システムプロパティの利用
　7.5　メモリに関する状態の取得
　7.6　リフレクション
　7.7　この章のまとめ
　7.8　練習問題
　7.9　練習問題の解答

第8章　非標準ライブラリの活用
　8.1　ライブラリとは
　8.2　クラスパスのおさらい
　8.3　commons-langを使ってみよう
　8.4　ログ出力ライブラリ
　8.5　オープンソースとライセンス
　8.6　この章のまとめ
　8.7　練習問題
　8.8　練習問題の解答

第Ⅱ部　外部資源へのアクセス

第9章　ファイルの操作
　9.1　ファイル操作の前提知識
　9.2　テキストファイルの読み書き
　9.3　バイナリファイルの読み書き
　9.4　ファイル操作の落とし穴
　9.5　ストリームの概念
　9.6　フィルタの活用
　9.7　ファイルシステムの操作
　9.8　この章のまとめ
　9.9　練習問題
　9.10　練習問題の解答

第10章　さまざまなファイル形式
　10.1　データフォーマット
　10.2　CSV形式
　10.3　プロパティファイル形式
　10.4　XML形式
　10.5　オブジェクトの直列化
　10.6　この章のまとめ
　10.7　練習問題
　10.8　練習問題の解答

第11章　ネットワーク通信
　11.1　URLを用いた高水準アクセス
　11.2　Socketを用いた低水準アクセス
　11.3　ServerSocketを使ってサーバーを作る
　11.4　この章のまとめ
　11.5　練習問題
　11.6　練習問題の解答

第12章　データベースアクセス
　12.1　データベースとは
　12.2　データベースの基本操作
　12.3　データベースの接続と切断
　12.4　更新系SQLの送信
　12.5　検索系SQLの送信
　12.6　結果表の処理
　12.7　トランザクション処理
　12.8　この章のまとめ
　12.9　練習問題
　12.10　練習問題の解答

第Ⅲ部　効率的な開発の実現

第13章　基本的な開発ツール
　13.1　Javaが備える基本ツール
　13.2　javadoc─仕様書の自動生成
　13.3　javac─コンパイル
　13.4　native2ascii─文字コードの変換
　13.5　jar─アーカイブの操作
　13.6　java─JVMの起動と実行
　13.7　統合開発環境
　13.8　この章のまとめ
　13.9　練習問題
　13.10　練習問題の解答

第14章　単体テストとアサーション
　14.1　不具合に対するアプローチ
　14.2　単体テストのやりかた
　14.3　JUnitを用いたテスト
　14.4　アサーション
　14.5　この章のまとめ
　14.6　練習問題
　14.7　練習問題の解答

第15章　メトリクスとリファクタリング
　15.1　品質の「見える化」
　15.2　さまざまなメトリクス
　15.3　リファクタリング
　15.4　コードの静的解析
　15.5　この章のまとめ
　15.6　練習問題
　15.7　練習問題の解答

第16章　コードとタスクの共有
　16.1　チームによる開発
　16.2　コードの共有
　16.3　SCMを用いた開発
　16.4　競合の発生と回避
　16.5　タスクの共有
　16.6　この章のまとめ
　16.7　練習問題
　16.8　練習問題の解答

第17章　アジャイルな開発
　17.1　チーム開発の基盤
　17.2　共通の言葉
　17.3　共通の手順
　17.4　アジャイルという価値観
　17.5　エクストリーム・プログラミング（XP）
　17.6　スクラム（Scrum）
　17.7　ビルドの自動化
　17.8　この章のまとめ
　17.9　練習問題
　17.10　練習問題の解答

第Ⅳ部　より高度な設計をめざして

第18章　設計の原則とデザインパターン
　18.1　優れた設計の原則
　18.2　コード記述全般に関する原則
　18.3　クラスの設計に関する原則
　18.4　クラスの関係に関する原則
　18.5　デザインパターン
　18.6　Facade　内部を隠してシンプルに
　18.7　Singleton　唯一無二の存在
　18.8　Strategy　プラグインの切り替え
　18.9　TemplateMethod　大まかなシナリオ
　18.10　この章のまとめ
　18.11　練習問題
　18.12　練習問題の解答

第19章　スレッドによる並列処理
　19.1　処理効率の追求
　19.2　Javaにおける並列処理
　19.3　スレッドセーフな設計
　19.4　Concurrency Utilitiesの利用
　19.5　並列処理の影響と可能性
　19.6　この章のまとめ
　19.7　練習問題
　19.8　練習問題の解答

付録　エラー解決・虎の巻

あとがき＆参考文献一覧

索引

COLUMN
・メソッドチェーン
・String・char配列・byte配列の相互変換
・可変長引数
・APIの改訂と普及の速度
・和暦を扱うAPI
・Java7以前でも便利な日時APIを利用するには
・ダイヤモンド演算子の省略記法
・Collectionインタフェース
・古参のコレクションクラス
・CollectionクラスとArraysクラス
・equals()オーバーライドが不要なクラス
・ハッシュ計算に登場する整数たち
・オーバーライドによるアクセス修飾の拡大
・静的型付けと動的型付け
・利用できる実型引数を制限する
・減りゆくインナークラス活躍の場
・配列に対してStream処理を行うには
・膨大なデータを分散高速処理するアプローチ
・OS環境変数の取得
・コンパイル時にもクラスパス指定は必要
・ログレベルの利用基準は明確に
・デュアルライセンスとは
・Creative Commonsライセンス
・ランダムアクセス用のAPI
・文字コード体系の別称
・Java7における便利な記法
・ディレクトリの指定方法
・標準出力の接続先をファイルに変更する
・分業インタフェースとしてのデータフォーマット
・プロパティファイルの注意点
・クラスパスからファイルを読み込む
・JSON－Webで活躍するデータフォーマット
・ファイナライザで後片付けしない
・DatagramSocketを使ったUDP通信
・RFCを読もう
・JVM内部でプログラムと同居するDBMS
・DriverManager以外の方法によるConnectionの取得
・クラスロード時に動作するstaticブロック
・RDBMS以外のストレージ
・DTOとDAO
・JVM上で動作するJava以外の言語
・2種類の「単体テスト」
・目的の違いによるテストの分類方法
・優れたテストケースを見つけるための方法論
・JUnit3の場合
・テストメソッド名に日本語を使う
・契約による設計
・計測できないものは制御できない
・さまざまな環境から起動できるツールたち
・より高度なバージョン管理システムの活用
・プロジェクトの状態を共有するための資料
・アジャイル開発のメリットを活かしにくい状況
・振る舞い駆動開発（BDD）
・日本に関係が深い「アジャイル開発」
・XPとスクラムの併用
・mavenによる高水準ビルド自動化
・想像以上に重要な「名前」
・SOLID原則
・Singletonパターンの抜け道に注意
・Runnableの利用
・並列実行性のために「状態」を排除する 